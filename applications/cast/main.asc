//application.allowDebug = false;
application.allowDebug = true;

//var url_web = "www.amebastudio.jp";
var url_web = "localhost";
//var url_web = "202.239.226.67";

var clientNum = new Array();		// キャスト毎ユーザ数配列
var WaitClientNum = new Array();	// キャスト毎待ちユーザ数配列
var WaitOtamesiNum = new Array();	// キャスト毎お試しユーザ数配列
var OtamesiFlg = new Array();		// キャスト毎お試しフラグ配列

var clientNum_Charge = new Array();	// キャスト毎有料視聴数配列
var clientNum_Free = new Array();	// キャスト毎無料視聴数配列

var castOut_timerId;

var clientNum_Mic = new Array();		// 生電話用マイク

var MAX_CLIENT = 200;					// 最大接続ユーザ数（２００人）
var MAX_WAIT_CLIENT = 100;				// 最大待ちユーザ数（１００人）
var MAX_WAIT_OTAMESI_CLIENT = 30;		// 最大待ちユーザ数（１００人）

var castClient;

var castTimer;
var castTimerCount=0;


application.onAppStart = function() 
{

	trace("スタートVer1.01");

}

application.onPublish = function (clientObj, streamObj)
{
	trace("パブリッシュされました。");
}

/**
 * コネクト時処理
 * 
 * @param cilent クライアントオブジェクト
 * @param cast_id キャストID
 * @param login_type ログインタイプ
 * 		CAST：キャスト
 * 		USER：視聴ユーザ
 * 		OTAMESI：お試し視聴ユーザ
 * 		WAITUSER：視聴待機ユーザ・お試し待機ユーザ再ログイン
 * 		WAIT：視聴ユーザ待ち処理
 * 		WAIT_OTAMESI：お試しユーザ待ち処理
 * 		OFFICE_USER：事務所
 * 		WAITIN：再入室
 * @param user_name ユーザ名
 * @user_id ユーザID
 **/
//application.onConnect = function(client, cast_id, login_type, user_name, user_id, mic_num, mic_user_id) 
application.onConnect = function(client, cast_id, login_type, user_name, user_id, mic_user_id) 
{
	client.cast_id = cast_id;
	client.login_type = login_type;
	client.user_name = user_name;
	client.check_count = 0;
//	client.mic_num = mic_num;
	client.mic_user_id = mic_user_id;

	if(user_id == null)
	{
//		trace("NULL");
		user_id = "";			// お試しNULL回避
	}

	/** 
	 * お試し二度目禁止
	**/
	if(user_id != "")
	{
//		trace("IN:" + user_id);
		if(OtamesiFlg[user_id] == "on")
		{
			var error = new Object();  
			error.message = "OTAMESI_ERR";
			application.rejectConnection(client, error);
			trace(client.user_name + "：お試し２度目禁止&user_id=" + user_id);
			client.login_type = "ERR";
			login_type = "ERR";
		}
	}
	
	/**
	 * キャスト/ユーザの場合分け
	**/
	if(login_type == "CAST")
	{
		// キャストの場合
		if(isNaN(client.cast_id))
		{
			// キャストIDが無い場合はエラー
			application.rejectConnection(client);
			trace(client.cast_id + "：エラーＩＤ接続解除");
		}
		else
		{
			clientNum[cast_id] = 0;			// リセット
			WaitClientNum[cast_id] = 0;		// リセット
			WaitOtamesiNum[cast_id] = 0;	// リセット
			
			clientNum_Charge[cast_id] = 0;	// リセット
			clientNum_Free[cast_id] = 0;	// リセット
			
			clientNum_Mic[cast_id] = 0;	// リセット
			
			// キャストログイン情報データベース登録
//			var informDB_vars = new LoadVars();
//			informDB_vars.send("http://" + url_web + "/cast/cast_chat_start.cgi?" + cast_id);
			
			trace("キャスト" + cast_id + "さんが接続");
			application.acceptConnection(client);
			
			// キャスト接続確認タイマー
//ql			castOut_timerId = setInterval(castHelthCheck, 3000, client);
			
			// セッション時間
			castTimer = setInterval(castTimerCheck, 1000, client);
			client.call("startSessionTimer",null, castTimerCount);
			new clientStartTimer(client);	// 全員のタイマースタート
			
			client.login = true;
			
			castClient = client;	// キャストクライアント
		}
	}
	else if((login_type == "USER")||(login_type == "WAITUSER")||(login_type == "OTAMESI"))
	{
		
/*
		if (1)
		{
				var error = new Object();  
				error.message = "MAXUSER";  
				application.rejectConnection(client, error);
				trace(client.cast_id + "：満室");
				client.login_type = "ERR";
		}
		else 
*/
		
		// ユーザの場合
		//
		if (((clientNum[cast_id] >= MAX_CLIENT)||		// 接続クライアント数が２００以上　または
			 (WaitClientNum[cast_id] > 0)||				// 視聴待ちあり　または
			 (WaitOtamesiNum[cast_id] > 0)				// お試し視聴待ちあり
		    )
			&&(login_type != "WAITUSER")				// 視聴待ちユーザではない
		   )
		{
			if((WaitClientNum[cast_id] + WaitOtamesiNum[cast_id]) >= MAX_WAIT_CLIENT)
			{
				// 待ち人数１００以上
				var error = new Object();  
				error.message = "MAXUSER_100";  
				application.rejectConnection(client, error);
				trace(client.cast_id + "：満室(100人超)");
				client.login_type = "ERR";
			}
			else if((login_type == "OTAMESI")&&
			        (WaitOtamesiNum[cast_id] >= MAX_WAIT_OTAMESI_CLIENT))
			{
				// お試し視聴でお試し視聴待ちが３０以上
				var error = new Object();  
				error.message = "MAXUSER_100";  
				application.rejectConnection(client, error);
				trace(client.cast_id + "：お試し満室(30人超)");
				client.login_type = "ERR";
			}
			else
			{
				// その他の待ち状態移行
				var error = new Object();  
				error.message = "MAXUSER";  
				application.rejectConnection(client, error);
				trace(client.cast_id + "：満室");
				client.login_type = "ERR";
			}
		}
		else
		{
			if(user_id != "")
			{
				// お試しの場合はuser_idがある
//				trace("IN:" + user_id);
				if(OtamesiFlg[user_id] == "on")
				{
					var error = new Object();  
					error.message = "OTAMESI_ERR";
					application.rejectConnection(client, error);
//					trace(client.user_name + "：お試し２度目禁止");
					trace(client.user_name + "：お試し２度目禁止&user_id=" + user_id);
					client.login_type = "ERR";
					login_type = "ERR";
				}
				else
				{
					OtamesiFlg[user_id] = "on";
				}
			}
			
			// 入れた場合はカウントアップする
			//
			if(login_type != "ERR")
			{
				client.login_type = "USER";
				
				// ユーザカウントアップ
				//				
				if(clientNum[cast_id] == null)
				{
					clientNum[cast_id] = 1;
				}
				else
				{
					clientNum[cast_id]++;
				}
				
				for(var i=0;i<application.clients.length;i++)
				{
					if(application.clients[i].cast_id == cast_id)
					{
						application.clients[i].call("RtnUserCount",null,clientNum[cast_id]);	// ユーザ数送信
					}
				}
				
				
				// 累計人数カウントアップ
				var informDB_vars = new LoadVars();
				informDB_vars.login_type = login_type;	// 一旦入力
				if (login_type == "USER")
				{
					clientNum_Charge[cast_id]++;	// 部屋に入った
					trace("ユーザー" + user_name + "さんが接続");
				}
				else if (login_type == "OTAMESI")
				{
					clientNum_Free[cast_id]++;		// お試し視聴
					trace("ユーザー" + user_name + "さんがお試し接続");
				}
				else if (login_type == "WAITUSER")
				{
					if(user_id != "")
					{
						clientNum_Free[cast_id]++;	// お試し視聴
						informDB_vars.login_type = "OTAMESI";	// 入れ直し
						trace("ユーザー" + user_name + "さんがお試し接続");
					}
					else
					{
						clientNum_Charge[cast_id]++;	// 部屋に入った
						informDB_vars.login_type = "USER";	// 入れ直し
						trace("ユーザー" + user_name + "さんが接続");
					}
				}
				
				// キャストログイン情報データベース登録
//				informDB_vars.send("http://www.amebastudio.jp/user/chat_in.cgi?" + cast_id);
				informDB_vars.cast_id = cast_id;
//ql				informDB_vars.send("http://" + url_web + "/user/chat_in.cgi?" + cast_id + "&login_type=" + informDB_vars.login_type);
				
//				trace("ユーザー" + user_name + "さんが接続");
				application.acceptConnection(client);			// 接続ＯＫ
				
				// クライアントチェックタイマー
//				client.timerid = setInterval(this, "check_timer", 10000, client);
				
				// 生電話用ユーザアカウント
				if (login_type == "USER")
				{
					// CASTに知らせる（ユーザ情報）
//					trace("castClient:" + castClient);
//					trace("user_id:" + client.mic_user_id);
//					trace("client.user_name:" + client.user_name);
					castClient.call("loginUserInfo", null, client.mic_user_id, client.user_name);
				}
				
				client.call("startSessionTimer",null, castTimerCount);
				
			}
		}
	}
	else if(login_type == "OFFICE_USER")
	{
		// 事務所の場合
		
		client.login_type = "OFFICE_USER";
		trace("事務所" + user_name + "さんが接続");
		application.acceptConnection(client);			// 接続ＯＫ
	}
	else if(login_type == "WAIT")
	{
		// 視聴ユーザ待ち処理
		//
		if(WaitClientNum[cast_id] == null)
		{
			WaitClientNum[cast_id] = 1;
		}
		else
		{
			WaitClientNum[cast_id]++;
		}
		client.wait_no = WaitClientNum[cast_id]
		
		trace("ユーザー" + user_name + "さんが待機中");
		application.acceptConnection(client);			// 接続ＯＫ
		
		client.call("RtnWaitUserCount",null,client.wait_no);
	}
	else if(login_type == "WAIT_OTAMESI")
	{
		// お試しユーザ待ち処理
		//
		if(WaitOtamesiNum[cast_id] == null)
		{
			WaitOtamesiNum[cast_id] = 1;
		}
		else
		{
			WaitOtamesiNum[cast_id]++;
		}
		client.wait_no = WaitOtamesiNum[cast_id]
		
		trace("ユーザー" + user_name + "さんがお試し待機中");
		application.acceptConnection(client);			// 接続ＯＫ
		
		client.call("RtnWaitUserCount",null,client.wait_no);
	}
	
	// クライアント数取得関数
	//
	client.getClientsLength = function() 
	{
		client.call("RtnUserCount",null,clientNum[client.cast_id]);
	}
	
	// 
	client.CheckWaitIn = function() 
	{
		if((client.wait_no <= 0)&&(clientNum[client.cast_id] < MAX_WAIT_CLIENT))
		{
			client.call("RtnWaitUserIn",null,"IN");
		}
	}
	
	//
	client.WaitReLogin = function() 
	{
		client.login_type = "WAITIN";
		client.call("WaitReLogin",null);
	}
	
	//
	client.TimerResetCount = function()
	{
		client.check_count = 0;
	}
	
	//
	this.check_timer = function(client)
	{
		client.check_count++;
		if (client.check_count >= 5)
		{
			clearInterval(client.timerid);
			application.disconnect(client);
		}
	}
	
	// キャストアライブ
	client.castAlive = function()
	{
//		trace("castAlive called"); 
		clearInterval(client.castAlive_timerId);
//		trace("clearInterval(castAlive_timerId : " + client.castAlive_timerId + ")");
		client.castAlive_timerId = setInterval(castNotAlive, 5000, client);
//		trace("setInterval(castAlive_timerId : " + client.castAlive_timerId + ")");
	}
	
	// 課金処理
	client.UserPayPoint = function(user_id, access_code, type)
	{
//		trace("UserPayPoint called: user_id=" + user_id + ", access_code=" + access_code);
		
		var my_send = new LoadVars();
		my_send.user_id = user_id;
		my_send.access_token = access_code;
//		my_send.dat1 = "1000";
		my_send.dat1 = type;
		my_send.dat2 = client.cast_id;
		var my_load = new LoadVars();
		my_load.onLoad = function(success)
		{
//			trace("onLoad success=" + success);
//			trace("my_load.RTN = " + my_load.RTN);
			
			if (success)
			{
				if (type=="3000")
				{
					client.call("telPayHandler", null, my_load.RTN);
				}
				else
				{
					client.call("payHandler", null, my_load.RTN);
				}
			}
		}
//ql		my_send.sendAndLoad("http://" + url_web + "/user/payUser.cgi", my_load);

//		trace(my_send.toString());

	}
	
}

function castTimerCheck(client)
{
	castTimerCount++;
	trace("Session Time = " + castTimerCount);
}

// キャストアライブタイマータイムアウト
function castNotAlive(client)
{
//	trace("castNotAlive called");
	application.disconnect(client);
	clearInterval(client.castAlive_timerId);
}

// キャストの接続確認
function castHelthCheck(client)
{
	var okng;
	trace("castHelthCheck interval called"); 
	if (client.login)
	{
		okng = client.call("CastHelthCheck", new helthHandler(client));
//		trace("call : " + okng);
		if (!okng)
		{
			// 呼び出し失敗時
			trace("キャスト" + client.cast_id + "さんが接続解除");
//			application.disconnect(client);		// キャストを強制ログアウト
//			new clientLogout(client);	// 全員ログアウト
			client.login = false;		// ログアウト
		}
	}
	else
	{
		clearInterval(castOut_timerId);		// タイマー解除
	}
	
}


// キャストヘルスチェックハンドラ
helthHandler = function(client)
{
	this.onResult = function(res)
	{
//		trace("helth : " + res);
		if (res != "OK")
		{
			// OK以外が返った場合
			clearInterval(castOut_timerId);		// タイマー解除
			if (client.login)
			{
				trace("キャスト" + client.cast_id + "さんが接続解除");
//				application.disconnect(client);		// キャストを強制ログアウト
//				new clientLogout(client);	// 全員ログアウト
				client.login = false;		// ログアウト
			}
		}
	}
	this.onStatus = function(info)
	{
		trace("Failed with code:" + info.code);
	}
};


// すべてのユーザをログアウトさせる
function clientLogout(client)
{
	trace("全員をログアウト");
	
	// 視聴ユーザのログアウト
	for(var i=0;i<application.clients.length;i++)
	{
		if(application.clients[i].cast_id == client.cast_id)
		{
			application.clients[i].call("CastLogout",null,"LOGOUT");
		}
	}
	
	// 
	
	var informDB_vars = new LoadVars();
	informDB_vars.cast_id = client.cast_id;
	informDB_vars.charge_num = clientNum_Charge[client.cast_id];
	informDB_vars.free_num = clientNum_Free[client.cast_id];
//	informDB_vars.send("http://" + url_web + "/cast/cast_chat_end.cgi?cast_id=" + client.cast_id + "&charge_num=" + clientNum_Charge[client.cast_id] + "&free_num=" + clientNum_Free[client.cast_id]);
	
//ql	var isOk = informDB_vars.send("http://" + url_web + "/cast/cast_chat_end.cgi?cast_id=" + client.cast_id + "&charge_num=" + clientNum_Charge[client.cast_id] + "&free_num=" + clientNum_Free[client.cast_id]);
	if (isOk)
	{
		trace("成功：/cast/cast_chat_end.cgi?cast_id=" + client.cast_id + "&charge_num=" + clientNum_Charge[client.cast_id] + "&free_num=" + clientNum_Free[client.cast_id]);
	}
	else
	{
		trace("失敗：/cast/cast_chat_end.cgi?cast_id=" + client.cast_id + "&charge_num=" + clientNum_Charge[client.cast_id] + "&free_num=" + clientNum_Free[client.cast_id]);
	}
}

// すべてのユーザにセッションタイマーストップを実行させる
function clientStopTimer(client)
{
	trace("全員のセッションタイマー停止");
	
	// 視聴ユーザのタイマー停止
	for(var i=0;i<application.clients.length;i++)
	{
		if(application.clients[i].cast_id == client.cast_id)
		{
			application.clients[i].call("userSessionTimerStop",null);
		}
	}
}

// すべてのユーザにセッションタイマースタートを実行させる
function clientStartTimer(client)
{
	trace("全員のセッションタイマー開始");
	
	// 視聴ユーザのタイマー開始
	for(var i=0;i<application.clients.length;i++)
	{
		if(application.clients[i].cast_id == client.cast_id)
		{
			application.clients[i].call("startSessionTimer",null, castTimerCount);
		}
	}
}

//
//
application.onDisconnect = function(client) 
{
	if(client.login_type == "CAST")
	{
		if(isNaN(client.cast_id))
		{
			trace(client.cast_id + "：エラーＩＤ接続解除");
		}
		else
		{
			trace("キャスト" + client.cast_id + "さんが接続解除");
			client.login = false;
//			new clientLogout(client);	// 全員をログアウト

			clearInterval(castTimer);		// タイマー解除
			new clientStopTimer(client);	// 全員をログアウト
		
		}
	}
	else if(client.login_type == "OFFICE_USER")
	{

		trace("事務所" + client.user_name + "さんが接続解除");

	}
	else if(client.login_type == "USER")
	{
		clientNum[client.cast_id]--;

		clearInterval(client.timerid);

		for(var i=0;i<application.clients.length;i++){
			if(application.clients[i].cast_id == client.cast_id){
				application.clients[i].call("RtnUserCount",null,clientNum[client.cast_id]);
			}
		}

		// キャストログイン情報データベース登録
		var informDB_vars = new LoadVars();
//ql		informDB_vars.send("http://" + url_web + "/user/chat_out.cgi?" + client.cast_id);

		trace("ユーザー" + client.user_name + "さんが接続解除");

		if(WaitClientNum[client.cast_id] > 0){
			WaitClientNum[client.cast_id]--;

			for(var i=0;i<application.clients.length;i++){
				if(application.clients[i].cast_id == client.cast_id){
					if(application.clients[i].login_type == "WAIT"){
						if(application.clients[i].wait_no <= 1){
							application.clients[i].wait_no = 0;
						}else{
							application.clients[i].wait_no--;
							application.clients[i].call("RtnWaitUserCount",null,application.clients[i].wait_no);
						}
					}
				}
			}
		}else if(WaitOtamesiNum[client.cast_id] > 0){
			WaitOtamesiNum[client.cast_id]--;

			for(var i=0;i<application.clients.length;i++){
				if(application.clients[i].cast_id == client.cast_id){
					if(application.clients[i].login_type == "WAIT_OTAMESI"){
						if(application.clients[i].wait_no <= 1){
							application.clients[i].wait_no = 0;
						}else{
							application.clients[i].wait_no--;
							application.clients[i].call("RtnWaitUserCount",null,application.clients[i].wait_no);
						}
					}
				}
			}
		}
		
		// 生電話用マイクカウント
//		clientNum_Mic[client.cast_id] -= client.mic_num;
		// CASTに知らせる
//		for(var i=0;i<application.clients.length;i++)
//		{
//			if ((application.clients[i].cast_id == client.cast_id) && (application.clients[i].login_type == "CAST"))
//			{
//				application.clients[i].call("MicCount",null,clientNum_Mic[client.cast_id]);	// マイク数送信
//				break;
//			}
//		}
		// CASTに知らせる（ユーザ情報）
		if (castClient != null)
		{
			castClient.call("logoutUserInfo", null, client.mic_user_id, client.user_name);
		}

	}else if(client.login_type == "WAIT"){

		if(WaitClientNum[client.cast_id] > 0){
			WaitClientNum[client.cast_id]--;

			for(var i=0;i<application.clients.length;i++){
				if(application.clients[i].cast_id == client.cast_id){
					if(application.clients[i].login_type == "WAIT"){
						if(client.wait_no < application.clients[i].wait_no){
							application.clients[i].wait_no--;
							application.clients[i].call("RtnWaitUserCount",null,application.clients[i].wait_no);
						}
					}
				}
			}
		}

		trace("ユーザー" + client.user_name + "さんが待機解除");

	}else if(client.login_type == "WAIT_OTAMESI"){

		if(WaitOtamesiNum[client.cast_id] > 0){
			WaitOtamesiNum[client.cast_id]--;

			for(var i=0;i<application.clients.length;i++){
				if(application.clients[i].cast_id == client.cast_id){
					if(application.clients[i].login_type == "WAIT_OTAMESI"){
						if(client.wait_no < application.clients[i].wait_no){
							application.clients[i].wait_no--;
							application.clients[i].call("RtnWaitUserCount",null,application.clients[i].wait_no);
						}
					}
				}
			}
		}

		trace("ユーザー" + client.user_name + "さんがお試し待機解除");

	}else if(client.login_type == "WAITIN"){
		trace("ユーザー" + client.user_name + "さんが待機解除＆入出");
	}


}

